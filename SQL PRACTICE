{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ecb5b52a-fb8f-43af-9ae5-64fc9f54f5d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "959111e1-3bc9-4ef0-b2ef-123b8dbe0140",
   "metadata": {},
   "outputs": [],
   "source": [
    "sqlite_db = 'database_name.db'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c08e3ce3-3dc0-4766-97aa-563d5cb6ac63",
   "metadata": {},
   "outputs": [],
   "source": [
    "connection = sqlite3.connect(sqlite_db)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9f222ebb-1033-4829-ad1d-aa869e75e9e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "cursor = connection.cursor()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7e0621c-21f1-48a7-a8dd-125388b9bc73",
   "metadata": {},
   "source": [
    "The easiest way to incorporate an SQL database into a Python application is by using the `sqlite3` package for [`Python 2.7`](https://docs.python.org/2.7/library/sqlite3.html) or [`Python 3.x`](https://docs.python.org/3/library/sqlite3.html).\n",
    "\n",
    "Open a connection to an SQLite database file.  As before, if the file does not already exist it will automatically be created."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "462e0674-ac5a-4fa8-ae12-8d3ff4418f2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\britn\\\\OneDrive\\\\Documents\\\\IOD'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ec1feaae-2807-42a5-a5ec-65624b7e8d0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This line imports the sqlite3 module, which is a built-in Python module used to work with SQLite databases.\n",
    "\n",
    "# The database file is named test_db.sqlite. \n",
    "#If this file does not exist in the directory where the script is running, SQLite will create it when a connection is established.\n",
    "\n",
    "# creates a connection to the SQLite database specified by sqlite_db. The connect function from the sqlite3 module is used for this purpose.\n",
    "# If the specified database does not exist, SQLite will create it. The variable conn now holds the connection object, which is used to interact with the database.\n",
    "\n",
    "#This line creates a cursor object using the cursor method of the connection object (conn). \n",
    "#A cursor is a Python object that lets you execute SQL commands and queries on the database. \n",
    "#It's used to send commands to the database, receive data from the database, and navigate through the results of a query."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "18fc12cf-98c8-429c-ad51-8b5f80a97f03",
   "metadata": {},
   "outputs": [],
   "source": [
    "cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)''');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f601cf37-5e76-4992-9e74-2cfe207037aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "connection.commit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0590f79d-2576-4388-9343-ccb705185491",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "cursor.execute('''SELECT * FROM users''')\n",
    "print(cursor.fetchall())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dd38e74e-c238-4a67-b128-ae811b911a6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x168219685e0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ricky = ('Ricky', 32)\n",
    "cursor.execute('INSERT INTO users (name, age) VALUES (?, ?)', ricky)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "29808fc8-f376-4fd6-9b3b-c8264ce92af9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(1, 'Ricky', 32)]\n"
     ]
    }
   ],
   "source": [
    "cursor.execute('''SELECT * FROM users''')\n",
    "print(cursor.fetchall())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7e132d14-129c-4f0d-97f4-2f9f04cf5d56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(1, 'Ricky', 32)]\n"
     ]
    }
   ],
   "source": [
    "cursor.execute('''SELECT * FROM users''')\n",
    "print(cursor.fetchall())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f14b0c6c-182a-4637-b387-39f335dc8520",
   "metadata": {},
   "outputs": [],
   "source": [
    "sqlite3_db = 'testing.db'\n",
    "connection = sqlite3.connect(sqlite3_db)\n",
    "cursor = connection.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "051b9682-c1ce-47c0-87a5-9a24bd1d8c8f",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1259860917.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"C:\\Users\\britn\\AppData\\Local\\Temp\\ipykernel_87088\\1259860917.py\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    CREATE TABLE IF NOT EXISTS houses (\u001b[0m\n\u001b[1;37m               ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "CREATE TABLE IF NOT EXISTS houses ( \n",
    "    id INTEGER PRIMARY KEY, \n",
    "    size INTEGER, \n",
    "    bedrooms INTEGER, \n",
    "    age INTEGER, \n",
    "    price INTEGER\n",
    "); "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6f6e637d-94df-4cf1-88af-941d89853e38",
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import genfromtxt\n",
    "\n",
    "# import into nparray of ints, then convert to list of lists:\n",
    "data = genfromtxt('DATA/housing-data.csv', dtype = 'i8', \n",
    "                    delimiter = ',', skip_header = 1).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "97f99197-f8f2-4f50-ad91-670369cf9849",
   "metadata": {},
   "outputs": [],
   "source": [
    "#np.genfromtxt() is a function in NumPy used to load data from text files, with a focus on handling missing data.\n",
    "\n",
    "#dtype='i8': This argument specifies the data type of the resulting array. i8 stands for 64-bit integer. \n",
    "#By setting this, you're telling NumPy to treat all the data in the file as 64-bit integers.\n",
    "\n",
    "#delimiter=',': This specifies that the file uses a comma to separate values, which is standard for CSV files.\n",
    "\n",
    "#skip_header=1: This tells the function to skip the first line of the file. This is useful when the first line contains column headers, which is common in CSV files.\n",
    "\n",
    "#After reading the file, np.genfromtxt() returns a NumPy array. By appending .tolist() to the function call, this NumPy array is then converted to a Python list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "433183b4-bee3-44ea-907d-9f6a238fbaf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[2104, 3, 70, 399900],\n",
       " [1600, 3, 28, 329900],\n",
       " [2400, 3, 44, 369000],\n",
       " [1416, 2, 49, 232000],\n",
       " [3000, 4, 75, 539900],\n",
       " [1985, 4, 61, 299900],\n",
       " [1534, 3, 12, 314900],\n",
       " [1427, 3, 57, 198999],\n",
       " [1380, 3, 14, 212000],\n",
       " [1494, 3, 15, 242500],\n",
       " [1940, 4, 7, 239999],\n",
       " [2000, 3, 27, 347000],\n",
       " [1890, 3, 45, 329999],\n",
       " [4478, 5, 49, 699900],\n",
       " [1268, 3, 58, 259900],\n",
       " [2300, 4, 77, 449900],\n",
       " [1320, 2, 62, 299900],\n",
       " [1236, 3, 78, 199900],\n",
       " [2609, 4, 5, 499998],\n",
       " [3031, 4, 21, 599000],\n",
       " [1767, 3, 44, 252900],\n",
       " [1888, 2, 79, 255000],\n",
       " [1604, 3, 13, 242900],\n",
       " [1962, 4, 53, 259900],\n",
       " [3890, 3, 36, 573900],\n",
       " [1100, 3, 60, 249900],\n",
       " [1458, 3, 29, 464500],\n",
       " [2526, 3, 13, 469000],\n",
       " [2200, 3, 28, 475000],\n",
       " [2637, 3, 25, 299900],\n",
       " [1839, 2, 40, 349900],\n",
       " [1000, 1, 5, 169900],\n",
       " [2040, 4, 75, 314900],\n",
       " [3137, 3, 67, 579900],\n",
       " [1811, 4, 24, 285900],\n",
       " [1437, 3, 50, 249900],\n",
       " [1239, 3, 22, 229900],\n",
       " [2132, 4, 28, 345000],\n",
       " [4215, 4, 66, 549000],\n",
       " [2162, 4, 43, 287000],\n",
       " [1664, 2, 40, 368500],\n",
       " [2238, 3, 37, 329900],\n",
       " [2567, 4, 57, 314000],\n",
       " [1200, 3, 76, 299000],\n",
       " [852, 2, 70, 179900],\n",
       " [1852, 4, 64, 299900],\n",
       " [1203, 3, 11, 239500]]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9d540506-0d02-47d0-96fe-9a8d726cd8f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "for d in data:\n",
    "    d.insert(0, None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8a494f29-77df-445d-913a-5ec54b093b34",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is a loop that iterates over each element in the list data. Each element of data is temporarily referred to as d within the loop.\n",
    "\n",
    "#d.insert(0, None) is a method call on the list d. \n",
    "#The insert() method is used to insert an item into a list at a specified index.\n",
    "#0 is the index where the new item should be inserted. Since list indices in Python start at 0, \n",
    "#this means that the new item will be inserted at the very beginning of the list d\n",
    "#None is the item to be inserted. None is a special value in Python that typically represents the absence of a value or a null state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d7a242f3-df46-40e4-b487-9665f044421b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n",
      "[[None, 2104, 3, 70, 399900], [None, 1600, 3, 28, 329900], [None, 2400, 3, 44, 369000]]\n"
     ]
    }
   ],
   "source": [
    "print(type(data))\n",
    "print(data[0:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "68d97502-3eba-43aa-966e-05f02a0877e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Connect to the testing.db database\n",
    "conn = sqlite3.connect('testing.db')\n",
    "cursor = conn.cursor()\n",
    "\n",
    "try:\n",
    "    # Create the table\n",
    "    cursor.execute('''\n",
    "    CREATE TABLE IF NOT EXISTS houses (\n",
    "        id INTEGER PRIMARY KEY, \n",
    "        size INTEGER, \n",
    "        bedrooms INTEGER, \n",
    "        age INTEGER, \n",
    "        price INTEGER\n",
    "    );\n",
    "    ''')\n",
    "    conn.commit()\n",
    "\n",
    "    # Insert data\n",
    "    for d in data:\n",
    "        cursor.execute('INSERT INTO houses VALUES (?, ?, ?, ?, ?)', d)\n",
    "    conn.commit()\n",
    "except sqlite3.OperationalError as e:\n",
    "    print(\"An error occurred:\", e)\n",
    "finally:\n",
    "    conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a7f6cad3-ea5e-41b6-b68e-1879bcad25e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[None, 2104, 3, 70, 399900],\n",
       " [None, 1600, 3, 28, 329900],\n",
       " [None, 2400, 3, 44, 369000],\n",
       " [None, 1416, 2, 49, 232000],\n",
       " [None, 3000, 4, 75, 539900],\n",
       " [None, 1985, 4, 61, 299900],\n",
       " [None, 1534, 3, 12, 314900],\n",
       " [None, 1427, 3, 57, 198999],\n",
       " [None, 1380, 3, 14, 212000],\n",
       " [None, 1494, 3, 15, 242500],\n",
       " [None, 1940, 4, 7, 239999],\n",
       " [None, 2000, 3, 27, 347000],\n",
       " [None, 1890, 3, 45, 329999],\n",
       " [None, 4478, 5, 49, 699900],\n",
       " [None, 1268, 3, 58, 259900],\n",
       " [None, 2300, 4, 77, 449900],\n",
       " [None, 1320, 2, 62, 299900],\n",
       " [None, 1236, 3, 78, 199900],\n",
       " [None, 2609, 4, 5, 499998],\n",
       " [None, 3031, 4, 21, 599000],\n",
       " [None, 1767, 3, 44, 252900],\n",
       " [None, 1888, 2, 79, 255000],\n",
       " [None, 1604, 3, 13, 242900],\n",
       " [None, 1962, 4, 53, 259900],\n",
       " [None, 3890, 3, 36, 573900],\n",
       " [None, 1100, 3, 60, 249900],\n",
       " [None, 1458, 3, 29, 464500],\n",
       " [None, 2526, 3, 13, 469000],\n",
       " [None, 2200, 3, 28, 475000],\n",
       " [None, 2637, 3, 25, 299900],\n",
       " [None, 1839, 2, 40, 349900],\n",
       " [None, 1000, 1, 5, 169900],\n",
       " [None, 2040, 4, 75, 314900],\n",
       " [None, 3137, 3, 67, 579900],\n",
       " [None, 1811, 4, 24, 285900],\n",
       " [None, 1437, 3, 50, 249900],\n",
       " [None, 1239, 3, 22, 229900],\n",
       " [None, 2132, 4, 28, 345000],\n",
       " [None, 4215, 4, 66, 549000],\n",
       " [None, 2162, 4, 43, 287000],\n",
       " [None, 1664, 2, 40, 368500],\n",
       " [None, 2238, 3, 37, 329900],\n",
       " [None, 2567, 4, 57, 314000],\n",
       " [None, 1200, 3, 76, 299000],\n",
       " [None, 852, 2, 70, 179900],\n",
       " [None, 1852, 4, 64, 299900],\n",
       " [None, 1203, 3, 11, 239500]]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3a5e2bba-5145-4a06-8d5d-8f2fd7423f94",
   "metadata": {},
   "outputs": [
    {
     "ename": "ProgrammingError",
     "evalue": "Cannot operate on a closed database.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mProgrammingError\u001b[0m                          Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_87088\\2685182211.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0md\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0md\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mcursor\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'INSERT INTO houses VALUES (?, ?, ?, ?, ?)'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0md\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[0mconn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcommit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mProgrammingError\u001b[0m: Cannot operate on a closed database."
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "d = np.asarray([1200, 3, 15, 250000])\n",
    "d = d.tolist()\n",
    "d.insert(0, None)\n",
    "d\n",
    "cursor.execute('INSERT INTO houses VALUES (?, ?, ?, ?, ?)', d)\n",
    "conn.commit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "229f7570-2b03-4756-a174-dbacb07b8c55",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
